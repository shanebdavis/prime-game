import &StandardImport

numColumns =
  getEnv().numColumns ? 10
  | 0

getBoardLocation = (number) ->
  number--
  x = number % numColumns
  y =
    number - x
    / numColumns

  new Point
    x * tileSize
    y * tileSize

class Board extends FluxComponent
  @subscriptions
    :currentGame.currentGame

  @stateFields
    hoverNumber: null

  render: ->
    @currentGame extract
      winningNumber
      players
      pawns
      emojis

    pawnLocations = []

    Element
      size: log
        w: tileSize * numColumns
        h: tileSize * Math.ceil winningNumber / numColumns
      scale:(ps, cs) -> ps.minRatio cs

      array number from 1 to winningNumber
        &Number {}
          number
          location: getBoardLocation number

      array {number}, pawnId in pawns
        location = getBoardLocation number
        while find loc in pawnLocations when loc.eq location
          location.x -= 10
        pawnLocations.push location
        &Pawn {}
          key: pawnId
          pawnId
          location




