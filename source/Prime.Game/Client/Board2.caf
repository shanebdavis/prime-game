import &StandardImport

center = point 6.5 * tileSize

getBoardLocation = (number) ->
  Math extract log2, floor, pow

  m = floor log2 number
  a =
    number - pow 2, m
    / pow 2, m

  angle =
    Math.PI * 2 * a

  center
  .add point {}
    magnitude:
      m + a
      * tileSize
    angle



class Board2 extends FluxComponent
  @subscriptions
    :currentGame.currentGame

  @stateFields
    hoverNumber: null

  render: ->
    @currentGame extract
      winningNumber
      players
      pawns
      emojis

    pawnLocations = []

    lastNumber = 64

    Element
      :childrenSize
      scale: .75
      draw:
        child: :background

        array factor in 3 5 7 2
          color = primeColors[factor]
          shape: (context, area) ->
            {x:cx, y:cy} = getBoardLocation 1
            context.moveTo cx, cy
            each n from 2 to lastNumber / factor by 1
              l = getBoardLocation n
              l2 = getBoardLocation factor * n
              context.moveTo l.x, l.y
              context.lineTo l2.x, l2.y

          outline:
            switch factor
            when 3, 5, 7
              compositeMode: :add
              lineWidth: factor
              color: color.withAlpha .33
            when 2
              compositeMode: :add
              lineWidth: 8
              color: color
            # when 5
            #   lineWidth: 6.66
            #   color: color.withAlpha .66
            # when 7
            #   lineWidth: 10
            #   color: color

        {}
          shape: (context, area) ->
            {x:cx, y:cy} = getBoardLocation 1
            context.moveTo cx, cy
            each n from 2 to lastNumber by 1
              {x, y} = getBoardLocation n
              switch n
              when 3 then context.lineTo center.x, center.y + tileSize * 1.1
              when 4 then context.lineTo center.x, center.y - tileSize * 1.33

              context.lineTo x, y

          outline:
            compositeMode: :add
            lineWidth: 10
            color: #3

      BitmapElement
        key: :background
        source: :/assets/NGC6814_hubble_3970.jpg

      array number from 1 to lastNumber by 1
        &Number {}
          number
          centered: true
          game2: true
          location = getBoardLocation number

      # array {number}, pawnId in pawns
      #   location = getBoardLocation number
      #   while find loc in pawnLocations when loc.eq location
      #     location.x -= 10
      #   pawnLocations.push location
      #   &Pawn {}
      #     key: pawnId
      #     pawnId
      #     location



